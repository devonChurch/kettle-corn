version: 0.2

phases:

  install:
    commands:

      - echo "ubuntu dependancies"
      - apt-get --yes update

      - echo "install puppeteer dependancies"
      - apt-get --yes install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget

      - echo "install canvas dependancies"
      - apt-get --yes install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++

      - echo "install node 8"
      - npm install -g n
      - n 8.5.0

      - echo "node version"
      - node --version

      - echo "npm version"
      - npm --version

      - echo "install local dependancies"
      - npm install

  pre_build:
    commands:

      - echo "*** codebuild environment variables ***"
      - echo "site environment     = $SITE_ENV"
      - echo "bucket (site)        = $BUCKET_SITE"
      - echo "bucket (screen shot) = $BUCKET_SCREEN_SHOTS"
      - echo "cloudfront id        = $CLOUD_FRONT_ID"
      - echo "access (id)          = $AWS_ACCESS_KEY_ID"
      - echo "access (key)         = $AWS_SECRET_ACCESS_KEY"
      - echo "dealy (seconds)      = $DELAY"

      - echo "run unit tests"
      - npm run test:unit

  build:
    commands:

      - echo "create gatsby (production) build"
      - npm run build

  post_build:
    commands:

      - echo "clean previous build from s3"
      - aws s3 rm s3://$BUCKET_SITE/ --recursive
      
      - echo "deploy new build to s3"
      - aws s3 cp --acl public-read --recursive ./public/ s3://$BUCKET_SITE/
      
      - echo "invalidate cloud front cache"
      - npm run cache:invalidate
      
      - echo "run end-to-end tests"
      - npm run test:e2e:production
      
      - echo "prep screenshots"
      - npm run screenshots:prep:production
      
      - echo "create new screenshots"
      - npm run screenshots:create:production

      - echo "get previous new screen shots from s3 and set as old screenshots"
      - aws s3 cp s3://$BUCKET_SCREEN_SHOTS/new ./screenshots/old --recursive

      - echo "compare screenshots"
      - npm run screenshots:compare

      - echo "clean previous screenshots from s3"
      - aws s3 rm s3://$BUCKET_SCREEN_SHOTS/ --recursive
      
      - echo "deploy the following screenshot folders to s3"
      - echo ls ./screenshots/
      - echo ls ./screenshots/old/
      - echo ls ./screenshots/new/
      - echo ls ./screenshots/compare/
      - echo cat ./screenshots/manifest.json
      - aws s3 cp ./screenshots/ s3://$BUCKET_SCREEN_SHOTS/ --recursive

  # artifacts:
  #   files:
  #     - '**/*'
  #   base-directory: 'public'
  #   discard-paths: no